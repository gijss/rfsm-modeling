@Ecore(invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot",
settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot")

package be.kuleuven.rodinia.model.rfsm

annotation "http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot" as Pivot

/*
 * This xcore metamodel started as a transformation of the ecore metamodel in the rfsm paper
 */
 
class Node {
	String name	
	container State[0..1] parent opposite subnodes //how to handle root node?
}

//@Ecore(constraints="definitconn, onlyoneinitconn")
//Enforce that each composite state that is target of a transition, defines an initial connector.
//@Pivot(definitconn="self.subnodes->size() > 0 and Transition.allInstances()->select(t | t.target=self)->size() >= 1 implies (self.subnodes->select(c | c.oclIsTypeOf(Connector) and c.name='initial'))->size() = 1")
//A composite state may define at most one initial connector.
//@Pivot(onlyoneinitconn="self.subnodes.size > 0 implies (self.subnodes()->select(c | c.isTypeOf(Connector) and c.name='initial'))->size() <= 1")

class State extends Node {
	contains Transition[] transitions opposite owner
	contains Node[] subnodes opposite parent
	contains Function[0..1] entry	//contains function in this example (original:refers)
	contains Function[0..1] doo	//contains function in this example (original:refers)
	contains Function[0..1] exit	//contains function in this example (original:refers)
}

class Connector extends Node {
	boolean public
	contains History[0..1] history
}

//@Ecore(constraints="test")
//Transitions are owned by composite states and not, as often assumed, by the states from which they originate
//todo: needs helper operations like least-common-ancestor
//@Pivot(test="priority_number <> 0") //example
class Transition {
	int priority_number = "0"
	container State[1] owner opposite transitions
	contains Event[] events	opposite owner//possible to add this logic to the guard function
	contains Function[0..1] guard	//contains function in this example (original:refers)
	contains Function[0..1] effect	//contains function in this example (original:refers)
	refers Node[1] source
	refers Node[1] target
}

//possible to add this logic to the guard function
class Event {
	String eventliteral
	container Transition owner opposite events
}

class Function {
	String sourcecode
}

class History {
	int depth
	boolean hot
}