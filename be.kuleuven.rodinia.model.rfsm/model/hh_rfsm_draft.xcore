@Ecore(invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot",
settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot")

package be.kuleuven.rodinia.model.rfsm

annotation "http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot" as Pivot

/*
 * This Xcore metamodel of rFSM is based on the Ecore metamodel in the rFSM paper ('Coordinating Robotic Tasks and Systems with rFSM Statecharts' by M. Klotzbucher, H. Bruyninckx)
 */
 
 class Vertex {
 	String name
 }
 
//can be used as directed or undirected edge
//expresses connects relationship
class Edge {
	refers Vertex[1] source
	refers Vertex[1] target
}

@Ecore(constraints="defineOnlyOneRootHyperVertex")
//There is only one HyperVertex that has no parent (ie: root HyperVertex),
//a rFSM model is always contained within a state
@Pivot(defineOnlyOneRootHyperVertex="(HyperVertex.allInstances()->select(n | n.parent.oclIsUndefined ()))->size() = 1")
//expresses contains relationship
class HyperVertex extends Vertex {
	contains HyperVertex[] subHyperVertices opposite parent
	container HyperVertex[0..1] parent opposite subHyperVertices
	
	
	//TODO: rewrite functions for new model!!!!!!
	//is one ancestor of two?
	@Pivot(body="if (one = two) 
					then true
				else
					if (two.parent.oclIsUndefined ())
						then false
					else 
						if (two.parent = one)
							then true
						else 
							isAncestor(one, two.parent)
						endif
					endif
				endif")
	op Boolean isAncestor(Vertex one, Vertex two)
	
	//get least common ancestor of node one and two
	@Pivot(body="if isAncestor(one, two) and one.oclIsTypeOf(HyperVertex)
					then one.oclAsType(HyperVertex)
				else 
					if isAncestor(two, one) and two.oclIsTypeOf(HyperVertex)
						then two.oclAsType(HyperVertex)
					else
						LCA(one.parent,two.parent)
					endif
				endif")
	op HyperVertex LCA(Vertex one, Vertex two)
}

//graphedge necessary to define owner, but possible to skip this step and put logic in State/Transition
@Ecore(constraints="transitionOwner legalBoundaryCrossing")
//Transitions are owned by composite states and not by the states from which they originate
//It is required that transitions are owned by no state less nested than the transition LCA
@Pivot(transitionOwner="let lca : State = LCA(self.source, self.target) in self.owner = lca or isAncestor(self.owner, lca)") //example
//The transition target should point to a HyperVertex less or equally nested than source HyperVertex
//So the parent of the target HyperVertex is an ancestor of the source HyperVertex 
//and - IS THIS CORRECT? - a transition from parent to direct child is illegal
@Pivot(legalBoundaryCrossing="(self.target.parent <> self.source) and isAncestor(self.target.parent, self.source)")
class GraphEdge extends Edge {
	container HyperGraph[1] owner opposite edges
}
 
class HyperGraph extends HyperVertex {
	contains GraphEdge[] edges opposite owner
}

@Ecore(constraints="defineInitialConnectorWhenComposite defineMaxOneInitialConnector onlyLeafStatesHaveDoo")
//Each composite state that is target of a transition, defines an initial connector.
//So the root composite state should define an initial connector??? (constraint is taken from rFSM paper)
@Pivot(defineInitialConnectorWhenComposite="self.subHyperVertices->size() > 0 and Transition.allInstances()->exists(t | t.target=self) implies self.subHyperVertexs->select(c | c.oclIsTypeOf(Connector) and c.name='initial')->size() = 1")
//A composite state may define at most one initial connector.
@Pivot(defineMaxOneInitialConnector="(self.subHyperVertices->size() > 0) implies (self.subHyperVertices->select(c | c.oclIsTypeOf(Connector) and c.name='initial')->size() <= 1)")
//Only leaf-states can define a doo function. (not sure about this one)
@Pivot(onlyLeafStatesHaveDoo="(not self.doo.oclIsUndefined()) implies (self.subHyperVertices->size() = 0)")
class State extends HyperGraph {
	contains Function[0..1] entry	//contains function in this example (original:refers)
	contains Function[0..1] doo	//contains function in this example (original:refers)
	contains Function[0..1] exit	//contains function in this example (original:refers)
}

//todo: constraint that connector can't have subnodes or transitions
class Connector extends Vertex {
	boolean public
	contains History[0..1] history
}

@Ecore(constraints="maxOneTransitionFromInitialConnector noGuardFromInitialConnector")
//An initial connector can have only one outgoing transition
@Pivot(maxOneTransitionFromInitialConnector="(self.source.oclIsTypeOf(Connector) and self.source.name='initial') implies (Transition.allInstances()->select(t | t.source = self.source)->size()) <= 1")
//An outgoing transition from an initial connector can't have a guard function
@Pivot(noGuardFromInitialConnector="(self.source.oclIsTypeOf(Connector) and self.source.name='initial') implies guard.oclIsUndefined()")
class Transition extends GraphEdge {
	int priority_number = "0"
	contains Event[] events	opposite owner	//possible to add this logic to the guard function
	contains Function[0..1] guard	//contains function in this example (original:refers)
	contains Function[0..1] effect	//contains function in this example (original:refers)
}

//possible to add this logic to the guard function, which would be more generic
//this simple event-trigger-language is based on the Lua rFSM implementation
class Event {
	String eventliteral
	container Transition owner opposite events
}

//todo: use Lua grammar to parse function
class Function {
	String sourcecode
}

//how to model history behaviour?
//not implemented in Lua yet (I think)
class History {
	int depth
	boolean hot
}

//Behavioral constraints:
//exactly one leaf state is active and if a state is active, its parent is active too; so the set of active states is always transitively closed with respect to the parent relation.
//The higher the source state of a transition is located in the state machineâ€™s tree, the higher the priority of the transition.
//as soon as an enabled transition is found, the searching terminates and the transition is executed
//the program can't be in a connector, only in a state -> all guard functions on a compound transition should be true before traversing to the next state
